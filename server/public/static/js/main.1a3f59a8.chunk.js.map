{"version":3,"sources":["CommentCreate.js","CommentList.js","PostList.js","PostCreate.js","App.js","serviceWorker.js","index.js"],"names":["postId","useState","content","setContent","onSubmit","event","a","preventDefault","axios","post","className","value","onChange","e","target","comments","renderedComments","map","comment","status","key","id","posts","setPosts","fetchPosts","get","res","data","useEffect","renderedPosts","Object","values","style","width","marginBottom","title","CommentList","CommentCreate","setTitle","App","PostCreate","PostList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAGe,cAAiB,IAAdA,EAAa,EAAbA,OAAa,EACCC,mBAAS,IADV,mBACtBC,EADsB,KACbC,EADa,KAGvBC,EAAQ,uCAAG,WAAMC,GAAN,SAAAC,EAAA,6DACfD,EAAME,iBADS,SAGTC,IAAMC,KAAN,iCAAqCT,EAArC,aAAwD,CAC5DE,YAJa,OAOfC,EAAW,IAPI,2CAAH,sDAUd,OACE,6BACE,0BAAMC,SAAUA,GACd,yBAAKM,UAAU,cACb,8CACA,2BACEC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAWU,EAAEC,OAAOH,QACnCD,UAAU,kBAGd,4BAAQA,UAAU,mBAAlB,aCxBO,cAAmB,IAAhBK,EAAe,EAAfA,SAEVC,EAAoBD,GAAYA,EAASE,KAAI,SAAAC,GACjD,IAAIhB,EAWJ,MAVqB,aAAnBgB,EAAQC,SACVjB,EAAUgB,EAAQhB,SAEE,YAAnBgB,EAAQC,SACTjB,EAAU,sCAEU,aAAnBgB,EAAQC,SACTjB,EAAU,kCAGH,wBAAIkB,IAAKF,EAAQG,IAAKnB,MAG/B,OAAO,4BAAKc,ICfC,aAAO,IAAD,EACOf,mBAAS,IADhB,mBACZqB,EADY,KACLC,EADK,KAGbC,EAAU,uCAAG,4BAAAlB,EAAA,sEACCE,IAAMiB,IAAI,0BADX,OACXC,EADW,OAEjBH,EAASG,EAAIC,MAFI,2CAAH,qDAMhBC,qBAAU,WACRJ,MACC,IAEH,IAAMK,EAAgBC,OAAOC,OAAOT,GAAOL,KAAI,SAAAR,GAC7C,OACE,yBACEC,UAAU,OACVsB,MAAO,CAAEC,MAAO,MAAOC,aAAc,QACrCd,IAAKX,EAAKY,IAEV,yBAAKX,UAAU,aACb,4BAAKD,EAAK0B,OACV,kBAACC,EAAD,CAAarB,SAAUN,EAAKM,WAC5B,kBAACsB,EAAD,CAAerC,OAAQS,EAAKY,UAMpC,OACE,yBAAKX,UAAU,qDACZmB,ICjCQ,aAAO,IAAD,EACO5B,mBAAS,IADhB,mBACZkC,EADY,KACLG,EADK,KAGblC,EAAQ,uCAAG,WAAMC,GAAN,SAAAC,EAAA,6DACfD,EAAME,iBADS,SAETC,IAAMC,KAAK,gCAAiC,CAChD0B,UAHa,OAKfG,EAAS,IALM,2CAAH,sDAQd,OACE,6BACE,0BAAMlC,SAAUA,GACd,yBAAKM,UAAU,cACb,wCACA,2BACEC,MAAOwB,EACPvB,SAAU,SAAAC,GAAC,OAAIyB,EAASzB,EAAEC,OAAOH,QACjCD,UAAU,kBAGd,4BAAQA,UAAU,mBAAlB,aCRO6B,MAZf,WACE,OACE,yBAAK7B,UAAU,aACb,2CACA,kBAAC8B,EAAD,MACA,6BACA,qCACA,kBAACC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a3f59a8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nexport default ({ postId }) => {\n  const [content, setContent] = useState('');\n\n  const onSubmit = async event => {\n    event.preventDefault();\n\n    await axios.post(`http://posts.com/posts/${postId}/comments`, {\n      content\n    });\n\n    setContent('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label>New Comment</label>\n          <input\n            value={content}\n            onChange={e => setContent(e.target.value)}\n            className=\"form-control\"\n          />\n        </div>\n        <button className=\"btn btn-primary\">Submit</button>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\n\n\nexport default ({ comments }) => {\n\n  const renderedComments =  comments && comments.map(comment => {\n    let content;\n  if (comment.status === \"approved\"){\n    content = comment.content;\n  }\n  if(comment.status === \"pending\"){\n    content = \"This comment is awating moderation\";\n  }\n  if(comment.status === \"rejected\"){\n    content = \"This comment has been rejected\";\n  }\n\n    return <li key={comment.id}>{content}</li>;\n  });\n\n  return <ul>{renderedComments}</ul>;\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CommentCreate from './CommentCreate';\nimport CommentList from './CommentList';\n\nexport default () => {\n  const [posts, setPosts] = useState({});\n\n  const fetchPosts = async () => {\n    const res = await axios.get('http://posts.com/posts');\n    setPosts(res.data);\n \n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  const renderedPosts = Object.values(posts).map(post => {\n    return (  \n      <div\n        className=\"card\"\n        style={{ width: '30%', marginBottom: '20px' }}\n        key={post.id}\n      >\n        <div className=\"card-body\">\n          <h3>{post.title}</h3>\n          <CommentList comments={post.comments} />\n          <CommentCreate postId={post.id} />\n        </div>\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"d-flex flex-row flex-wrap justify-content-between\">\n      {renderedPosts}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport axios from 'axios';\n\nexport default () => {\n  const [title, setTitle] = useState('');\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    await axios.post('http://posts.com/posts/create', {\n      title\n    });\n    setTitle('');\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <div className=\"form-group\">\n          <label>Title</label>\n          <input\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            className=\"form-control\"\n          />\n        </div>\n        <button className=\"btn btn-primary\">Submit</button>\n      </form>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport PostList from \"./PostList\";\nimport PostCreate from \"./PostCreate\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Create Post</h1>\n      <PostCreate />\n      <hr />\n      <h1>Posts</h1>\n      <PostList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}